/** Autogenerated Main.cpp. */

// =======================| Include only the DSP files  |=======================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// =================| Now we can add the rest of the codebase |=================

#include <JuceHeader.h>

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"

// =============================| Project Factory |=============================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations --------------------------------------------------
		
		registerDataNode<project::AR_networkdata>();
		registerDataNode<project::audio_networkdata>();
		registerDataNode<project::balancefx_networkdata>();
		registerDataNode<project::bgg_networkdata>();
		registerDataNode<project::delay_networkdata>();
		registerDataNode<project::delverb_networkdata>();
		registerDataNode<project::dg_networkdata>();
		registerDataNode<project::DspNetwork_networkdata>();
		registerDataNode<project::er_networkdata>();
		registerDataNode<project::ff_networkdata>();
		registerDataNode<project::fff_networkdata>();
		registerDataNode<project::fffff_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::filter_networkdata>();
		registerDataNode<project::flipterty_networkdata>();
		registerDataNode<project::g_networkdata>();
		registerDataNode<project::global_networkdata>();
		registerDataNode<project::graintest_networkdata>();
		registerDataNode<project::grans4_networkdata>();
		registerDataNode<project::granulargate_networkdata>();
		registerDataNode<project::GranularWithMod_networkdata>();
		registerDataNode<project::gtest_networkdata>();
		registerDataNode<project::gtt_networkdata>();
		registerDataNode<project::kjkj_networkdata>();
		registerDataNode<project::LFO_networkdata>();
		registerDataNode<project::LFO2_networkdata>();
		registerDataNode<project::loopar1_networkdata>();
		registerDataNode<project::loopar2_networkdata>();
		registerDataNode<project::mod_networkdata>();
		registerDataNode<project::modtest_networkdata>();
		registerDataNode<project::NewGran_networkdata>();
		registerDataNode<project::NewGran1_networkdata>();
		registerDataNode<project::pan_networkdata>();
		registerDataNode<project::pitchtimetest_networkdata>();
		registerDataNode<project::pmod_networkdata>();
		registerDataNode<project::polymod_networkdata>();
		registerDataNode<project::pp_networkdata>();
		registerDataNode<project::Proc_networkdata>();
		registerDataNode<project::Proc2_networkdata>();
		registerDataNode<project::Proc3_networkdata>();
		registerDataNode<project::Proc4_networkdata>();
		registerDataNode<project::rec_networkdata>();
		registerDataNode<project::recorded_networkdata>();
		registerDataNode<project::s1_networkdata>();
		registerDataNode<project::script_fx2_networkdata>();
		registerDataNode<project::script_time_variant_modulator2_networkdata>();
		registerDataNode<project::send_networkdata>();
		registerDataNode<project::send2_networkdata>();
		registerDataNode<project::send3_networkdata>();
		registerDataNode<project::send4_networkdata>();
		registerDataNode<project::Step_networkdata>();
		registerDataNode<project::temposync_networkdata>();
		registerDataNode<project::testG_networkdata>();
		registerDataNode<project::_networkdata>();
		registerDataNode<project::track_networkdata>();
		registerDataNode<project::track2_networkdata>();
		registerDataNode<project::track3_networkdata>();
		registerDataNode<project::track4_networkdata>();
		registerDataNode<project::vec1b_networkdata>();
		registerDataNode<project::vec2b_networkdata>();
		registerDataNode<project::vec3_networkdata>();
		registerDataNode<project::vec4_networkdata>();
		registerDataNode<project::vecfade_networkdata>();
		registerDataNode<project::vol_networkdata>();
		registerDataNode<project::WG_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#pragma clang diagnostic pop



/** Autogenerated Main.cpp. */

// =================================| Include only the DSP files  |=================================

#include <AppConfig.h>
#include <hi_dsp_library/hi_dsp_library.h>
#include <hi_faust/hi_faust.h>
#include "includes.h"
// ===========================| Now we can add the rest of the codebase |===========================

#include <JuceHeader.h>

#if !JUCE_WINDOWS
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreturn-type-c-linkage"
#endif

// =======================================| Project Factory |=======================================

namespace project
{

struct Factory: public scriptnode::dll::StaticLibraryHostFactory
{
	Factory()
	{
		TempoSyncer::initTempoData();
		// Node registrations ----------------------------------------------------------------------
		
		registerPolyNode<project::PitchShifter2<1>, scriptnode::wrap::illegal_poly<project::PitchShifter2<1>>>();
		registerPolyNode<project::PitchShifter<1>, scriptnode::wrap::illegal_poly<project::PitchShifter<1>>>();
		registerPolyNode<project::MODEFILTR<1>, scriptnode::wrap::illegal_poly<project::MODEFILTR<1>>>();
		registerPolyNode<project::DspNetwork<1>, wrap::illegal_poly<project::DspNetwork<1>>>();
		registerPolyNode<project::MacroMod<1>, wrap::illegal_poly<project::MacroMod<1>>>();
		registerPolyNode<project::Process<1>, wrap::illegal_poly<project::Process<1>>>();
		registerPolyNode<project::Stack<1>, wrap::illegal_poly<project::Stack<1>>>();
		registerDataNode<project::ana1_networkdata>();
		registerDataNode<project::Ana2_networkdata>();
		registerDataNode<project::ana3_networkdata>();
		registerDataNode<project::ana4_networkdata>();
		registerDataNode<project::analyise_networkdata>();
		registerDataNode<project::g1stack_networkdata>();
		registerDataNode<project::grainF_networkdata>();
		registerDataNode<project::GranularWithMod_networkdata>();
		registerDataNode<project::gt2244_networkdata>();
		registerDataNode<project::Hole_networkdata>();
		registerDataNode<project::modcont_networkdata>();
		registerDataNode<project::Proc2_networkdata>();
		registerDataNode<project::Proc3_networkdata>();
		registerDataNode<project::Proc4_networkdata>();
		registerDataNode<project::record_networkdata>();
		registerDataNode<project::res1_networkdata>();
		registerDataNode<project::track_networkdata>();
		registerDataNode<project::track2_networkdata>();
		registerDataNode<project::track3_networkdata>();
		registerDataNode<project::track4_networkdata>();
		registerDataNode<project::TrackIn2_networkdata>();
		registerDataNode<project::TrkIn1_networkdata>();
		registerDataNode<project::trkin3_networkdata>();
		registerDataNode<project::Trkin4_networkdata>();
		registerDataNode<project::vec1b_networkdata>();
		registerDataNode<project::vec2b_networkdata>();
		registerDataNode<project::vec3_networkdata>();
		registerDataNode<project::vec4_networkdata>();
		registerDataNode<project::vecfade_networkdata>();
		registerDataNode<project::vrtb_networkdata>();
	}
};
}

scriptnode::dll::FactoryBase* scriptnode::DspNetwork::createStaticFactory()
{
	return new project::Factory();
}

#if !JUCE_WINDOWS
#pragma clang diagnostic pop
#endif


